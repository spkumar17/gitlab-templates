# create a test template for Node.js applications
# This template is designed to be reusable across multiple Node.js projects.

.nodejs_test_template:
  stage: test
  image: node:20.18.1-alpine # Use a Node.js image, matching your Dockerfile's builder base
  variables:
    NODE_ENV: "test" # Set the environment to test for running tests
  before_script:
    - apk add --update --no-cache python3 make g++ # Install build dependencies  
  script:
    - echo "--- Running tests ---"
    - |
      TEST_CMD=$(node -p "require('./package.json').scripts?.test || ''")
      if [ -z "$TEST_CMD" ] || echo "$TEST_CMD" | grep -q "no test specified"; then
        echo "No valid test command found. Skipping tests.";
        exit 0;
      fi
    - npm test

# Check if there are tests defined in package.json

    # - npm test # Run the test command defined in package.json

  artifacts:
    when: always
    paths:
      - test-results/ # Directory where test results are stored
    expire_in: 1 day # Artifacts will expire after 1 day to save storage

  cache:
    key: "nodejs-$CI_COMMIT_REF_SLUG"
    paths:
      - node_modules/ # Cache node_modules to speed up builds
    policy: pull-push # Pull cache before job, push after job completion
  allow_failure: true # Allow this job to fail without failing the pipeline
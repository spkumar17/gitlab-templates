
# ---------------------------------------------------------------
# ðŸ“¦ CI/CD Variables (define in GitLab â†’ Settings â†’ CI/CD â†’ Variables)
# ---------------------------------------------------------------

# REGISTRY_IMAGE:      Full path to the Docker Hub image repository
#                         Example: docker.io/Boutique-store/microserviceimage
#                         Set this if you're pushing to Docker Hub

# SERVICE_NAME:           Logical name of the microservice (used in tagging and naming)
#                         Example: ADservice

# DOCKERHUB_USERNAME:     Your Docker Hub username (e.g., 'prasanna17')
#                         Store this as a **masked and protected** secret variable

# DOCKERHUB_PASSWORD:     Your Docker Hub password or personal access token (recommended)
#                          Store this as a **masked and protected** secret variable

# define these variables under:
# GitLab â†’ Project â†’ Settings â†’ CI/CD â†’ Variables
## This template depends on the application's build stage and downloads the .jar artifact from it.
# âž¤ Make sure to add the corresponding build job as a dependency when using this template.

# ---------------------------------------------------------------
# .gitlab-ci.yml or an included template file (e.g., .gitlab/ci_templates/docker.gitlab-ci.yml)
.docker_build_template:
  stage: docker_build
  image: docker:24.0.5 # Use the official Docker image for building
  services:
    - name: docker:24.0.5-dind
  variables:
    DOCKER_TLS_VERIFY: "0"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  script:
    - for i in {1..10}; do docker info && break || sleep 3; done

    - docker info || echo "Docker daemon not reachable"
    - echo "--- Logging into Docker Hub ---"
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "Successfully logged into Docker Hub."
    - echo "Building Docker image for $SERVICE_NAME..."
    - docker build --pull \
        --cache-from=type=local,src=.docker_cache \
        --cache-to=type=local,dest=.docker_cache,mode=max \
        -t "$REGISTRY_IMAGE/$SERVICE_NAME:$CI_COMMIT_SHORT_SHA" \
        -t "$REGISTRY_IMAGE/$SERVICE_NAME:latest" .
    - echo "Docker image built $REGISTRY_IMAGE/$SERVICE_NAME:$CI_COMMIT_SHORT_SHA"
    - echo "--- Saving Docker image to .tar artifact ---"
    - docker save -o $SERVICE_NAME-$CI_COMMIT_SHORT_SHA.tar $REGISTRY_IMAGE/$SERVICE_NAME:$CI_COMMIT_SHORT_SHA
    - echo "Image saved to $SERVICE_NAME-$CI_COMMIT_SHORT_SHA.tar"

  artifacts:
    paths:
      - $SERVICE_NAME-$CI_COMMIT_SHORT_SHA.tar
    expire_in: 1 day

  cache:
    key: "$SERVICE_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .docker_cache/
    policy: pull-push
